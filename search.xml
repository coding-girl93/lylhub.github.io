<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaScript设计模式]]></title>
      <url>http://yoursite.com/2016/09/08/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript设计模式（Design-pattern）"><a href="#JavaScript设计模式（Design-pattern）" class="headerlink" title="JavaScript设计模式（Design pattern）"></a>JavaScript设计模式（Design pattern）</h1><p>我们每天都在使用设计模式，但是不了解设计模式的人，可能根本不知道自己已经在使用设计模式了，了解设计模式，有利于提高自己的代码质量。那么什么是设计模式？设计模式可以为我们带来哪些好处呢？</p>
<blockquote>
<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。<br><a id="more"></a></p>
<h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><p>就像每种语言都有自己的规范，设计模式也遵循自己的原则</p>
</blockquote>
<ul>
<li><p>开闭原则（OCP：Open Closed Principe）</p>
<blockquote>
<p>Software entites(classes，modules，functions，etc)，should be  open for extension ,but closed for modification.</p>
<p>软件实体（类，模块，方法等等）应当对扩展开发，对修改关闭。</p>
</blockquote>
</li>
<li><p>单一职责（SRP:Single Responsibility Principle）</p>
<blockquote>
<p>A class should have only one reason to change</p>
</blockquote>
</li>
<li><p>里氏代换原则（LSP:Leskov Substitution Principle）</p>
</li>
<li><p>依赖倒转原则（DIP:Dependency Inversion Principle）</p>
</li>
<li><p>接口隔离(ISP:Interface Segregation Principle)</p>
</li>
<li><p>迪米特法则(最少知识原则)(PLK :Principle of Least Knowledge)</p>
<p>原则介绍<a href="https://segmentfault.com/a/1190000000691175" target="_blank" rel="external">请戳这里</a>;</p>
</li>
</ul>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型设计模式Creational"><a href="#创建型设计模式Creational" class="headerlink" title="创建型设计模式Creational"></a>创建型设计模式Creational</h3><blockquote>
<p>根据创建对象的概念进行分类</p>
</blockquote>
<ul>
<li><h4 id="工厂方法：Factory-Method"><a href="#工厂方法：Factory-Method" class="headerlink" title="工厂方法：Factory Method"></a>工厂方法：Factory Method</h4></li>
</ul>
<blockquote>
<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。简单点说就是茶水间的饮料机，要咖啡还是牛奶取决于你按哪个按钮。</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">子类：</div><div class="line">function CarFactory()&#123;</div><div class="line">  alert(&apos;car&apos;);</div><div class="line">&#125;</div><div class="line">function TrucksFactory()&#123;</div><div class="line">  alert(&apos;Trucks&apos;);</div><div class="line">&#125;</div><div class="line">工厂类：</div><div class="line">function Factory(type)&#123;</div><div class="line">  if(type == &apos;car&apos;)&#123;</div><div class="line">    return new CarFactory();</div><div class="line">  &#125;else if(type == &apos;Trucks&apos;)&#123;</div><div class="line">    return new TrucksFactory();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">使用：</div><div class="line">var o = new Factory(&apos;car&apos;);</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<ol>
<li>根据不同的环境创建不同的实例对象</li>
<li>对象的构建比较复杂</li>
<li>处理大量有相同属性的小对象</li>
</ol>
<blockquote>
<p>应用原则</p>
</blockquote>
<ol>
<li>单一职责</li>
</ol>
<p>因为每次扩展都需要修改工厂类，这样违背了开闭原则。</p>
<ul>
<li><h4 id="抽象工厂：Abstract-Factory"><a href="#抽象工厂：Abstract-Factory" class="headerlink" title="抽象工厂：Abstract Factory"></a>抽象工厂：Abstract Factory</h4></li>
</ul>
<blockquote>
<p>抽象工厂是工厂模式的升级版，他用来创建一组相关或者相互依赖的对象。上节学习了工厂模式，类的创建依赖工厂类，程序需要扩展时，我们必须创建新的工厂类。工厂类是用来生产产品的，那我们也可以把“工厂类当成我们要生产的产品”，所以抽象工厂就是“工厂的工厂”，即生产工厂的工厂。抽象工厂模式就是对功能类单独创建工厂类,这样就不必修改之前的代码，又扩展了功能。</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function Car()&#123;</div><div class="line">  alert(&apos;car&apos;);</div><div class="line">&#125;</div><div class="line">function Truck()&#123;</div><div class="line">  alert(&apos;Truck&apos;);</div><div class="line">&#125;</div><div class="line">//直接创建功能类工厂</div><div class="line">//汽车</div><div class="line">function CarFactory()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">CarFactory.prototype.produce = function() &#123;</div><div class="line">    return new Car();</div><div class="line">&#125;</div><div class="line">//货车</div><div class="line">function TruckFactory()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">TruckFactory.prototype.produce = function() &#123;</div><div class="line">    return new Truck();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用</div><div class="line">var factory = new TruckFactory();</div><div class="line">var truck  = factory.produce();</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>在一个继承体系中存在多个等级结构：例如不同的厂家生产car,并且分属各个等级结构中的实现类之间存在着一定的关联或者约束</p>
<blockquote>
<p>应用原则</p>
</blockquote>
<ol>
<li>单一原则</li>
<li>开闭原则</li>
</ol>
<ul>
<li><h4 id="建造者：Builder"><a href="#建造者：Builder" class="headerlink" title="建造者：Builder"></a>建造者：Builder</h4></li>
</ul>
<blockquote>
<p>建造器使得我们仅仅只通过定义对象的类型和内容，就可以去构建复杂的对象，为我们屏蔽了明确创造或者展现对象的过程。</p>
</blockquote>
<p><code>四要素：</code></p>
<p>产品类、抽象建造者类、建造者类、指导类</p>
<p>上栗子：前面你创建了一个生产保时捷的工厂，生产一台保时捷911需要的主要部件都一样(引擎，轮子，方向盘…)和流程是不变的，变的是引擎，轮子，控制系统等等部件具体实现，这些部件的生产交由具体的builder去生产。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">产品类：</div><div class="line">function Car() &#123;</div><div class="line">  var _frame, _engine, _wheel;</div><div class="line">  this.setFrame = function (val) &#123;</div><div class="line">    _frame = val;</div><div class="line">  &#125;;</div><div class="line">  this.setEngine = function (val) &#123;</div><div class="line">    _engine = val;</div><div class="line">  &#125;;</div><div class="line">  this.setWheel = function (val) &#123;</div><div class="line">    _wheel = val;</div><div class="line">  &#125;;</div><div class="line">  this.getFrame = function () &#123;</div><div class="line">    return _frame</div><div class="line">  &#125;;</div><div class="line">  this.getEngine = function () &#123;</div><div class="line">    return _engine</div><div class="line">  &#125;;</div><div class="line">  this.getWheel = function () &#123;</div><div class="line">    return _wheel</div><div class="line">  &#125;;</div><div class="line">  this.check = function () &#123;</div><div class="line">    console.log(_frame + &apos;检查完毕&apos;);</div><div class="line">    console.log(_engine + &apos;检查完毕&apos;);</div><div class="line">    console.log(_wheel + &apos;检查完毕&apos;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">抽象建造者类：</div><div class="line">function Builder() &#123;</div><div class="line">   	//定义流程的接口</div><div class="line">   	buildFrame、buildEngine、buildWheel、buildCar</div><div class="line">&#125;</div><div class="line"></div><div class="line">具体建造者类：</div><div class="line">function Builder911() &#123;</div><div class="line">  this.__proto__ = new Builder();</div><div class="line">  var _car = new Car();</div><div class="line">  this.buildFrame = function () &#123;</div><div class="line">    console.log(&apos;制造911骨架&apos;);</div><div class="line">    _car.setFrame(&apos;911骨架&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildEngine = function () &#123;</div><div class="line">    console.log(&apos;制造911引擎&apos;);</div><div class="line">    _car.setEngine(&apos;911引擎&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildWheel = function () &#123;</div><div class="line">    console.log(&apos;制造911轮子&apos;);</div><div class="line">    _car.setWheel(&apos;911轮子&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildCar = function () &#123;</div><div class="line">    console.log(&apos;911汽车各部组装完毕&apos;);</div><div class="line">    return _car;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function BuilderCayma() &#123;</div><div class="line">  this.__proto__ = new Builder();</div><div class="line">  var _car = new Car();</div><div class="line">  this.buildFrame = function () &#123;</div><div class="line">    console.log(&apos;制造Cayma骨架&apos;);</div><div class="line">    _car.setFrame(&apos;Cayma骨架&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildEngine = function () &#123;</div><div class="line">    console.log(&apos;制造Cayma引擎&apos;);</div><div class="line">    _car.setEngine(&apos;Cayma引擎&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildWheel = function () &#123;</div><div class="line">    console.log(&apos;制造Cayma轮子&apos;);</div><div class="line">    _car.setWheel(&apos;Cayma轮子&apos;);</div><div class="line">  &#125;;</div><div class="line">  this.buildCar = function () &#123;</div><div class="line">    console.log(&apos;Cayma汽车各部组装完毕&apos;);</div><div class="line">    return _car;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">指导类：</div><div class="line">function Director(Builder) &#123;</div><div class="line">  //传入具体制造者</div><div class="line">  var _builder = Builder;</div><div class="line">  this.build = function () &#123;</div><div class="line">    _builder.buildFrame();</div><div class="line">    _builder.buildEngine();</div><div class="line">    _builder.buildWheel();</div><div class="line">    return _builder.buildCar();</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">使用：</div><div class="line"></div><div class="line">var builder911 = new Builder911();</div><div class="line">var director911 = new Director(builder911);</div><div class="line">var car911 = director911.build();</div><div class="line">car911.check();</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>需要生成的对象具有复杂的内部结构；需要生成的对象内部属性本身相互依赖。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>1.建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体而言可以取得比较好的稳定性。<br>2.建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成。</p>
<ul>
<li><h4 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h4></li>
</ul>
<blockquote>
<p>“四人组”称原型模式是一种基于现有对象模板，通过克隆方式创建对象的模板（《JavaScript设计模式》p70），我们可以认为原型模式是基于原型继承的模式，是一种组合式继承，可以在其中创建对象</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">基类：</div><div class="line">var base = function()&#123;</div><div class="line">  this.name = &apos;base&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">子类：</div><div class="line">var sub = Object.create(base);</div><div class="line">console.log(sub.name);</div></pre></td></tr></table></figure>
<p><code>Object.create(prototype,descriptors)</code>:创建一个具有指定原型且可选择性地包含指定属性的对象,实现继承</p>
<ul>
<li><h4 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h4></li>
</ul>
<blockquote>
<p>单例就是保证一个类只有一个实例</p>
</blockquote>
<p>简单单例模式:使用对象字面量的方式创建对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var singleton = &#123;</div><div class="line">  name : &apos;&apos;,</div><div class="line">  age : &apos;&apos;,</div><div class="line">  method: function()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：全局的资源，公共的数据</p>
<p>惰性单例模式：通过闭包设置私有变量，延迟初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var Singleton = (function () &#123;</div><div class="line">    var instantiated;</div><div class="line">    function init() &#123;</div><div class="line">        /*这里定义单例代码*/</div><div class="line">        return &#123;</div><div class="line">            publicMethod: function () &#123;</div><div class="line">                console.log(&apos;hello world&apos;);</div><div class="line">            &#125;,</div><div class="line">            publicProperty: &apos;test&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        getInstance: function () &#123;</div><div class="line">            if (!instantiated) &#123;</div><div class="line">                instantiated = init();</div><div class="line">            &#125;</div><div class="line">            return instantiated;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>分支单体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var Slington = (function()&#123;  </div><div class="line">    var def = true;</div><div class="line">    var More = function()&#123;</div><div class="line">        var objA = &#123; //火狐浏览器  内部的一些配置</div><div class="line">            attr1: &apos;ff attr1&apos;,</div><div class="line">            //属性1</div><div class="line">            //方法1</div><div class="line">        &#125;</div><div class="line">        var objB = &#123;  //ie浏览器 内部的一些配置</div><div class="line">            attr2: &apos;ie attr1&apos;,</div><div class="line">            //属性1</div><div class="line">            //方法1</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return (def) ? new More().objA : new More().objB;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="结构型设计模式-Structural"><a href="#结构型设计模式-Structural" class="headerlink" title="结构型设计模式(Structural)"></a>结构型设计模式(Structural)</h3><blockquote>
<p>结构型模式关注于对象组成和通常识别的方式实现不同对象直接的关系。</p>
</blockquote>
<ul>
<li><h4 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a>适配器模式（Adapter）</h4><blockquote>
<p>适配器模式是将一个对象的方法或者属性转化为客户希望的另外一个对象的方法或属性，适配器模式使得原本由于接口不兼容而不能一起工作的对象可以一起工作(有种偷梁换柱的感觉奥)。速成包装器(wrapper)</p>
</blockquote>
<p>上栗子：猫：会走、会叫（miao）;狗：会走、会叫（wang）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//猫</div><div class="line">var Cat = function()&#123;&#125;</div><div class="line">Cat.prototype.go=function()&#123;&#125;</div><div class="line">Cat.prototype.miao = function()&#123;</div><div class="line">  console.log(&apos;miao&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//狗</div><div class="line">var Dog = function()&#123;&#125;</div><div class="line">Dog.prototype.go=function()&#123;&#125;</div><div class="line">Dog.prototype.wang = function()&#123;</div><div class="line">  console.log(&apos;wang&apos;);</div><div class="line">&#125;</div><div class="line">// 如果我们想让狗也实现猫的叫声，就需要写一个新的狗的适配器DogAdapter</div><div class="line">var DogAdapter = function(dog)&#123;</div><div class="line">  Cat.apply(this);</div><div class="line">  this.dog = dog;</div><div class="line">&#125;</div><div class="line">DogAdapter.prototype = new Cat();</div><div class="line">DogAdapter.prototype.miao = function()&#123;</div><div class="line">  this.dog.wang();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//测试</div><div class="line">var cat = new Cat();</div><div class="line">var dog = new Dog();</div><div class="line">var dogAdapter = new DogAdapter(dog);</div><div class="line">//原始各自的行为</div><div class="line">cat.miao();//miao</div><div class="line">dog.wang();//wang</div><div class="line">//狗调用猫的叫声，发自己的声音</div><div class="line">dogAdapter.miao();//wang</div></pre></td></tr></table></figure>
</li>
<li><h4 id="桥接模式Bridge"><a href="#桥接模式Bridge" class="headerlink" title="桥接模式Bridge"></a>桥接模式Bridge</h4><blockquote>
<p>将抽象部分与她的实现部分分离，是他们可以独立的变化</p>
</blockquote>
<p>这样说可能有点抽象，下面我们用代码说话，上栗子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//常用的ajax请求</div><div class="line">function sendInfo(element)&#123;</div><div class="line">  var id = element.id;</div><div class="line">  ajax( &quot;GET&quot;,&quot;info.json?id=&quot;+id, function( result )&#123;</div><div class="line">         ...</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">//很多时候我们使用sendInfo方法，每个方法中都有ajax请求，这时你会发现大量重复的代码(当你的代码中超过2处重复的代码时，你就要考虑重构你的代码了,单一职责原则)</div><div class="line">function sendInfo(elelment)&#123;</div><div class="line">  var id = element.id;</div><div class="line">  callback = function(result)&#123;&#125;</div><div class="line">  ajaxBrige(id,callback);</div><div class="line">&#125;</div><div class="line">function ajaxBrige(id,callback)&#123;</div><div class="line">    var id = element.id;</div><div class="line">    ajax( &quot;GET&quot;,&quot;info.json?id=&quot;+id, function( result )&#123;</div><div class="line">         callback(reslut)</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点<ol>
<li>接口和实现隔离，实现单一责任</li>
<li>提高可扩充性</li>
<li>实现的细节对用户隐藏</li>
</ol>
</li>
</ul>
</li>
<li><h4 id="组合模式（Composite）"><a href="#组合模式（Composite）" class="headerlink" title="组合模式（Composite）"></a>组合模式（Composite）</h4><blockquote>
<p>将对象组合成树形结构以表示整体-部分的管理，组合模式中只有两种类型对象，组合对象，叶子对象</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">//组合对象</div><div class="line">function ImagesStore( id )&#123;</div><div class="line">    this.children = [];</div><div class="line">    this.element = document.createElement(&quot;div&quot;);</div><div class="line">    this.element.id = id;</div><div class="line">    this.element.className = &quot;imgs-store&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImagesStore.prototype = &#123;</div><div class="line">    constructor ： ImagesStore，</div><div class="line"></div><div class="line">    add : function( child )&#123;</div><div class="line">        this.children.push( child );</div><div class="line">        this.element.appendChild( child.getElement() );</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    remove : function( child )&#123;</div><div class="line">        for( var node, i=0; node = this.getChild(i); i++ )&#123;</div><div class="line">            if( node === child )&#123;</div><div class="line">                this.children.splice( i, 1 );</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            this.element.removeChild( child.getElement() );</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getChild : function( i )&#123;</div><div class="line">        return this.children[i];</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    show : function()&#123;</div><div class="line">        this.element.style.display = &apos;&apos;;</div><div class="line">        for( var node, i=0; node = this.getChild(i); i++ )&#123;</div><div class="line">            node.show();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    hide : function()&#123;</div><div class="line">        for( var node, i=0; node = this.getChild(i); i++ )&#123;</div><div class="line">            node.hide();</div><div class="line">        &#125;</div><div class="line">        this.element.style.display = &apos;none&apos;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getElement : function()&#123;</div><div class="line">        return this.element;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//叶子对象</div><div class="line">function ImageItem( src )&#123;</div><div class="line">    this.element = document.createElement(&quot;img&quot;);</div><div class="line">    this.element.src = src;</div><div class="line">    this.element.className = &quot;img-item&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImageItem.prototype = &#123;</div><div class="line">    constructor ： ImagesStore，</div><div class="line"></div><div class="line">    add : function( child )&#123;</div><div class="line">        throw new Error(&quot;this is image object, no add function&quot;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    remove : function( child )&#123;</div><div class="line">        throw new Error(&quot;this is image object, no remove function&quot;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getChild : function( i )&#123;</div><div class="line">        throw new Error(&quot;this is image object, no getChild function&quot;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    show : function()&#123;</div><div class="line">        this.element.style.display = &apos;&apos;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    hide : function()&#123;</div><div class="line">        this.element.style.display = &apos;none&apos;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getElement : function()&#123;</div><div class="line">        return this.element;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//组合</div><div class="line">var store = new ImagesStore(&quot;first&quot;);</div><div class="line">store.add( new ImageItem(&quot;/img/1.jpg&quot;) );</div><div class="line">store.add( new ImageItem(&quot;/img/2.jpg&quot;) );</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<ul>
<li>你想表示对象的部分-整体层次结构时；</li>
<li>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）</li>
</ul>
</li>
<li><h4 id="装饰器模式（Decorator）"><a href="#装饰器模式（Decorator）" class="headerlink" title="装饰器模式（Decorator）"></a>装饰器模式（Decorator）</h4><blockquote>
<p>在不改变原类和继承的情况下动态扩展对象功能，通过包装一个对象来实现一个新的具有原对象相同接口的新的对象。</p>
</blockquote>
<p>在没有使用模式之前，对于一个js小白来讲，创建一个父类，通过不同的子类来实现不同的功能，这也是面向对象的思想，思路是正确的，可是你有没有想过后期的维护呢？如果功能少还好，功能很多就要写很多个子类，同时如果需要扩展也要重新定义子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//父类</div><div class="line">var Car = function()&#123;&#125;</div><div class="line">//不同公共的子类子类</div><div class="line">var CarWithPowerLocks = function() &#123;...&#125;;</div><div class="line">var CarWithPowerWindows = function() &#123;...&#125;;</div><div class="line">var CarWithPowerLocksAndPowerWindows = function() &#123;...&#125;;</div><div class="line">var CarWithAC = function() &#123;...&#125;;</div><div class="line">var CarWithACAndPowerLocks = function() &#123;...&#125;;</div><div class="line">var CarWithACAndPowerWindows = function() &#123;...&#125;;</div><div class="line">var CarWithACAndPowerLocksAndPowerWindows = function() &#123;...&#125;;</div></pre></td></tr></table></figure>
<p>下面使用装饰者模式来拯救你的不可维护的代码吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">//创建一个基类Car</div><div class="line">var Car = functionn()&#123;&#125;</div><div class="line">Car.prortype=&#123;</div><div class="line">  start: function() &#123;</div><div class="line">        console.log(&apos;伴随着引擎的轰鸣声，车子发动了！&apos;);</div><div class="line">    &#125;,</div><div class="line">    drive: function() &#123;</div><div class="line">        console.log(&apos;走起!&apos;);</div><div class="line">    &#125;,</div><div class="line">    getPrice: function() &#123;</div><div class="line">        return 11000.00;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//创建装饰者抽象类</div><div class="line">// 你需要传递一个Car（或者是CarDecorator）才能为它添加功能。</div><div class="line">var CarDecorator = function(car) &#123;</div><div class="line">    this.car = car;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// CarDecorator 实现相同的接口</div><div class="line">CarDecorator.prototype = &#123;</div><div class="line">    start: function() &#123;</div><div class="line">        this.car.start();</div><div class="line">    &#125;,</div><div class="line">    drive: function() &#123;</div><div class="line">        this.car.drive();</div><div class="line">    &#125;,</div><div class="line">    getPrice: function() &#123;</div><div class="line">        return this.car.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//具体的装饰者类</div><div class="line">var PowerLocksDecorator = function(car) &#123;</div><div class="line">    // 这是JavaScript里调用父类构造函数的方式</div><div class="line">    CarDecorator.call(this, car);</div><div class="line">    console.log(&apos;装配：添加动力锁&apos;);</div><div class="line">&#125;</div><div class="line">PowerLocksDecorator.prototype = new CarDecorator();</div><div class="line">PowerLocksDecorator.prototype.drive = function() &#123;</div><div class="line">    // 你可以这么写</div><div class="line">    this.car.drive();</div><div class="line">    // 或者你可以调用父类的drive方法：</div><div class="line">    // CarDecorator.prototype.drive.call(this);</div><div class="line">    console.log(&apos;车门自动上锁&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var PowerWindowsDecorator = function(car) &#123;</div><div class="line">    CarDecorator.call(this, car);</div><div class="line">    console.log(&apos;装配：添加动力表盘&apos;);</div><div class="line">&#125;</div><div class="line">PowerWindowsDecorator.prototype = new CarDecorator();</div><div class="line"></div><div class="line">var ACDecorator = function(car) &#123;</div><div class="line">    CarDecorator.call(this, car);</div><div class="line">    console.log(&apos;装配：添加空调&apos;);</div><div class="line">&#125;</div><div class="line">ACDecorator.prototype = new CarDecorator();</div><div class="line">ACDecorator.prototype.start = function() &#123;</div><div class="line">    this.car.start();</div><div class="line">    console.log(&apos;冷风吹起来&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们每次新增功能，都可以确保基类和装饰类不改变，只需要通过具体的装饰类来扩展功能就好。感觉和组合模式很像，组合模式侧重部分-整体，将部分注入到整体中，而装饰者模式是通过具体的装饰者类实现角色的基本功能并添加额外功能</p>
<p>看完栗子，来总结一下：</p>
<blockquote>
<p>装饰者模式的几大要素</p>
</blockquote>
<ol>
<li>角色（Component）:定义了接口，规范准备接受的对象（Car）</li>
<li>装饰角色（Decorator）：持有角色（Component）的实例，定义与角色一致的接口（CarDecorator）</li>
<li>具体装饰着（PowerLocksDecorator）:负责给角色添加附加功能</li>
</ol>
<blockquote>
<p>优点</p>
</blockquote>
<ol>
<li>装饰类和被装饰类可以独立发展，不会相互耦合</li>
<li>装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。就增加功能来说，装饰器模式相比生成子类更为灵活。</li>
</ol>
<blockquote>
<p>使用场景</p>
</blockquote>
<ol>
<li>扩展一个类的功能。</li>
<li>动态增加功能，动态撤销。</li>
</ol>
<blockquote>
<p>使用了 开闭原则</p>
</blockquote>
<p><a href="http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/" target="_blank" rel="external">这里讲解很精彩</a></p>
</li>
<li><h4 id="外观模式（Facede）"><a href="#外观模式（Facede）" class="headerlink" title="外观模式（Facede）"></a>外观模式（Facede）</h4><blockquote>
<p>门面模式本质是实现一个简单的统一接口来处理对各个子系统接口的处理和调用</p>
</blockquote>
<p>这里我们来回忆一下之前说过的桥接模式，两者感觉差不多，实际侧重点并不相同。桥接模式侧重于各个类相互独立，而外观模式侧重于接口和内部实现的分离，我们只需要知道怎样调用接口无需知道内部的实现过程。</p>
<p>上栗子：模拟电脑启动，假设电脑启动顺序：启动CPU，启动内存，启动硬盘，加载数据等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 外观模式     </div><div class="line">function CPU() &#123;</div><div class="line">  this.startup = function () &#123;</div><div class="line">    console.log(&quot;启动CPU&quot;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">function Memory() &#123;</div><div class="line">  this.startup = function () &#123;</div><div class="line">    console.log(&quot;启动Memory&quot;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">function Disk() &#123;</div><div class="line">  this.startup = function () &#123;</div><div class="line">    console.log(&quot;启动Disk&quot;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">function Computer() &#123;</div><div class="line">  var _cpu, _memory, _disk;</div><div class="line">  _cpu = new CPU();</div><div class="line">  _memory = new Memory();</div><div class="line">  _disk = new Disk();</div><div class="line">  this.start = function () &#123;</div><div class="line">    _cpu.startup();</div><div class="line">    _memory.startup();</div><div class="line">    _disk.startup();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">computer = new Computer();</div><div class="line">computer.start();</div></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<p>1.减少系统相互依赖。<br>2.提高灵活性。<br>2.提高了安全性。</p>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>1.为复杂的模块或子系统提供外界访问的模块。<br>2.客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。</p>
</li>
<li><h4 id="享元模式（Flyweight）"><a href="#享元模式（Flyweight）" class="headerlink" title="享元模式（Flyweight）"></a>享元模式（Flyweight）</h4><p>​</p>
</li>
<li><h4 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h4></li>
</ul>
<h3 id="行为设计模式（Behavioral）"><a href="#行为设计模式（Behavioral）" class="headerlink" title="行为设计模式（Behavioral）"></a>行为设计模式（Behavioral）</h3><ul>
<li><h4 id="解释器（Interpreter）"><a href="#解释器（Interpreter）" class="headerlink" title="解释器（Interpreter）"></a>解释器（Interpreter）</h4></li>
<li><h4 id="模板方法（Template-Method）"><a href="#模板方法（Template-Method）" class="headerlink" title="模板方法（Template Method）"></a>模板方法（Template Method）</h4></li>
<li><h4 id="职责链（Responsibility）"><a href="#职责链（Responsibility）" class="headerlink" title="职责链（Responsibility）"></a>职责链（Responsibility）</h4></li>
<li><h4 id="命令（Command）"><a href="#命令（Command）" class="headerlink" title="命令（Command）"></a>命令（Command）</h4></li>
<li><h4 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h4></li>
<li><h4 id="中介者（Mediator）"><a href="#中介者（Mediator）" class="headerlink" title="中介者（Mediator）"></a>中介者（Mediator）</h4></li>
<li><h4 id="观察者（Observe）"><a href="#观察者（Observe）" class="headerlink" title="观察者（Observe）"></a>观察者（Observe）</h4></li>
<li><h4 id="状态（State）"><a href="#状态（State）" class="headerlink" title="状态（State）"></a>状态（State）</h4></li>
<li><h4 id="策略（Strategy）"><a href="#策略（Strategy）" class="headerlink" title="策略（Strategy）"></a>策略（Strategy）</h4></li>
<li><h4 id="访问者（Visitor）"><a href="#访问者（Visitor）" class="headerlink" title="访问者（Visitor）"></a>访问者（Visitor）</h4></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[bookmarks使用]]></title>
      <url>http://yoursite.com/2016/09/01/bookmarks%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>bookmarks可以很便利的存储、管理我们日常使用的网站，一般情况下，我们仅仅是把自己的网站存在自己的bookmarks下面，以便自己日后查看。在团队中，多多向别人学习，看看别人的代码，瞅瞅别人经常浏览的网站，通过这种方式找到学习的方向，提升自己，特别是对菜鸟，会提供方向性的指导，多浏览一下质量高的网站，对自己的提高帮助很大的。</p>
</blockquote>
<ol>
<li><p>安装npm install netscape-bookmarks</p>
<p><code>npm install netscape-bookmarks</code></p>
</li>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var netscape = require(&apos;netscape-bookmarks&apos;);</div><div class="line">var bookmarks = &#123;</div><div class="line">  &apos;Dave Eddy&apos;: &apos;http://www.daveeddy.com&apos;,</div><div class="line">  &apos;Perfume Global&apos;: &apos;http://www.perfume-global.com&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var html = netscape(bookmarks));</div><div class="line">console.log(html);</div></pre></td></tr></table></figure>
</li>
<li><p>copy html格式文件，html标签说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE NETSCAPE-Bookmark-file-1&gt;</div><div class="line">&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=UTF-8&quot;&gt;</div><div class="line">&lt;TITLE&gt;Bookmarks&lt;/TITLE&gt;</div><div class="line">&lt;H1&gt;Bookmarks Menu&lt;/H1&gt;</div><div class="line">&lt;DL&gt;&lt;p&gt;   // 书签列表</div><div class="line">    &lt;DT&gt;&lt;A HREF=&quot;http://www.daveeddy.com&quot;&gt;Dave Eddy&apos;s Blog&lt;/a&gt; // 书签项</div><div class="line">    &lt;DT&gt;&lt;A HREF=&quot;http://www.perfume-global.com/&quot;&gt;Perfume Global&lt;/a&gt;</div><div class="line">    &lt;DT&gt;&lt;H3&gt;Unfiled&lt;/H3&gt; // 书签文件夹</div><div class="line">    &lt;DL&gt;&lt;p&gt;</div><div class="line">        &lt;DT&gt;&lt;A HREF=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt; // 书签项</div><div class="line">    &lt;/DL&gt;&lt;p&gt;</div><div class="line">    &lt;DT&gt;&lt;H3&gt;Second Folder&lt;/H3&gt;</div><div class="line">    &lt;DL&gt;&lt;p&gt;</div><div class="line">        &lt;DT&gt;&lt;H3&gt;Nested Folders!&lt;/H3&gt;</div><div class="line">        &lt;DL&gt;&lt;p&gt;</div><div class="line">            &lt;DT&gt;&lt;A HREF=&quot;http://www.youtube.com&quot;&gt;YouTube&lt;/a&gt;</div><div class="line">            &lt;DT&gt;&lt;A HREF=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;</div><div class="line">        &lt;/DL&gt;&lt;p&gt;</div><div class="line">    &lt;/DL&gt;&lt;p&gt;</div><div class="line">    &lt;DT&gt;&lt;A HREF=&quot;http://www.tekzoned.com&quot; ADD_DATE=&quot;1357547237&quot; LAST_VISIT=&quot;1357547238&quot; LAST_MODIFIED=&quot;1357547239&quot;&gt;TekZoned&lt;/a&gt;</div><div class="line">&lt;/DL&gt;&lt;p&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器-书签管理器-从html文件导入书签</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript模板引擎]]></title>
      <url>http://yoursite.com/2016/08/31/javascriptTemplate/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>javascript模板引擎作为数据与界面分离工作中的重要角色，下面我们从模板引擎的实现原理以及目前流行的模板引擎，模板引擎的优势来介绍一下</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>虽然每个引擎从模板语法、语法解析、变量赋值、字符串拼接的实现方式各有所不同，但关键的渲染原理仍然是动态执行 javascript 字符串。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><blockquote>
<p>js模板的本质是 <code>变静为动</code></p>
</blockquote>
<ul>
<li>视图和代码逻辑分离、低耦合</li>
<li>可拓展、可维护、开发效率高</li>
<li>代码可读性</li>
</ul>
<h3 id="目前流行的-JavaScript模板引擎"><a href="#目前流行的-JavaScript模板引擎" class="headerlink" title="目前流行的 JavaScript模板引擎"></a>目前流行的 JavaScript模板引擎</h3><ul>
<li><h4 id="artTemplate-腾讯"><a href="#artTemplate-腾讯" class="headerlink" title="artTemplate(腾讯)"></a>artTemplate(腾讯)</h4></li>
<li><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h4></li>
<li><h4 id="baiduTemplate-百度"><a href="#baiduTemplate-百度" class="headerlink" title="baiduTemplate(百度)"></a>baiduTemplate(百度)</h4></li>
<li><h4 id="juicer-淘宝"><a href="#juicer-淘宝" class="headerlink" title="juicer(淘宝)"></a>juicer(淘宝)</h4></li>
<li><h4 id="Underscore-Templates"><a href="#Underscore-Templates" class="headerlink" title="Underscore Templates"></a>Underscore Templates</h4></li>
<li><h4 id="Embedded-JS-Templates"><a href="#Embedded-JS-Templates" class="headerlink" title="Embedded JS Templates"></a>Embedded JS Templates</h4><p>等等，可以参考这里<a href="http://www.csdn.net/article/2013-09-16/2816951-top-five-javascript-templating-engines" target="_blank" rel="external">五款流行的JavaScript模板引擎</a>;<a href="http://blog.csdn.net/wuchengzhi82/article/details/8938122" target="_blank" rel="external">javascript各种模板引擎</a>;</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li>
</ul>
<blockquote>
<p>以 （EJS）Embedded JS Templates为例</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用hexo+GitHub搭建自己的博客]]></title>
      <url>http://yoursite.com/2016/08/31/%E4%BD%BF%E7%94%A8hexo-GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>作为一名前端程序媛，没有自己的博客，听起来是不是很low！对，你没有听错，我确实没有亲自搭建过自己的博客，就在2016年8月30日，偶尔阅读前端工程师必备技能的时候，发现了搭建自己博客这个东西，于是决定搭建一个博客来存储自己的知识总结，以便形成自己的知识体系。这之前使用github<a href="https://github.com/lylhub" target="_blank" rel="external">我的github地址</a>管理自己的代码（其实写的比较少）,而且很多知识性的总结写在里面不是很方便阅读。博客可以很方便的把知识总结存储起来。以前用过CSDN,用于存储知识还是可以，但是本地化和主题等就没有了，毕竟是用人家的网站，要想个性化还是要自己亲自去搭建一个高大上的网站吧。你正在浏览这个博客网站，耗费了本姑娘很长时间才搭建好的！！<br><a id="more"></a><br>这里有一篇很详细的教程：<a href="http://www.jianshu.com/p/985d07d88ef4" target="_blank" rel="external">使用 GitHub Pages + Hexo 基础教程</a>;<br>因为还没有写过正式的博客，对于hexo的使用还不熟悉，后面将更新我的的使用心得。</p>
]]></content>
    </entry>
    
  
  
</search>
