<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[今天心情很好]]></title>
      <url>http://yoursite.com/2016/11/25/%E9%9A%8F%E7%AC%9401/</url>
      <content type="html"><![CDATA[<p>花费了好多时间，终于搭建起一个自己还可以看得过去的网站，心情很好啊！不过炫酷的首页还没开动~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React+Redux]]></title>
      <url>http://yoursite.com/2016/11/24/React+Redux/</url>
      <content type="html"><![CDATA[<h3 id="Redux-React实现"><a href="#Redux-React实现" class="headerlink" title="Redux+React实现"></a>Redux+React实现</h3><a id="more"></a>
<p>上一篇写了一个react实现组件直接的通信，随着react的流行，越来越多的前端爱好者开始使用它，作为前端小白，我也跟着潮流来了，使用react构建大型应用，必不可少的就是一个好的前端架构来管理你的数据，例如flux、redux,这里我写了一个简单的redux工作流程，仅仅是为了自己了解redux的工作机制，大神请绕过~~</p>
<p><a href="http://cn.redux.js.org/docs/basics/Actions.html" target="_blank" rel="external">redux中文文档</a></p>
<p><a href="http://redux.js.org/" target="_blank" rel="external">redux英文文档</a></p>
<p><img src="http://qiutc.me/img/redux.jpeg" alt=""></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt=""></p>
<p>从图中可以看出 react component的改变是通过store来驱动的，我们从view层看代码结构然后依次类推</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123;createStore,&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"> <span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers/reducers.js'</span></div><div class="line"> <span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"> <span class="keyword">import</span> &#123; Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"> <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app.jsx'</span></div><div class="line"></div><div class="line"> <span class="keyword">let</span> store = createStore(reducers)</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Index</span>  <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">App</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Index</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</div></pre></td></tr></table></figure>
<h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><ul>
<li>Provider是中间件，他是在原有 App Container 上面再包一层，他的作用就是接收 store 里面的 store 作为 props，将store放在context里，给下面的connect用的。</li>
<li>我们看到引入了一个reducers ，下面看看这个是怎么实现的</li>
</ul>
<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p> reduces.js</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;CLICK_TEXT,CLICK_BUTTON&#125; from <span class="string">'../actions/actions.js'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="built_in">default</span> function myApp(state=&#123;<span class="built_in">text</span>:<span class="string">"Hello"</span>&#125;,action)&#123;</div><div class="line">    <span class="built_in">switch</span> (action.type) &#123;</div><div class="line">        <span class="built_in">case</span> CLICK_TEXT:</div><div class="line">            <span class="built_in">return</span> &#123;</div><div class="line">                <span class="built_in">text</span>:state.<span class="built_in">text</span>==<span class="string">'Hello'</span>?<span class="string">'在coding的姑娘'</span>:<span class="string">'Hello'</span></div><div class="line">            &#125;</div><div class="line">        <span class="built_in">case</span> CLICK_BUTTON:</div><div class="line">            <span class="built_in">return</span>&#123;</div><div class="line">                <span class="built_in">text</span>:<span class="string">'有一个姑娘在coding'</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="built_in">default</span>:</div><div class="line">            <span class="built_in">return</span> state</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>action 只是说明了要去做什么，和做这件事情需要的参数值。<br>具体去改变 store 中的 state 是由 reducer 来做的。<br>reducer 其实是一个包含 switch 的函数，前面不是说组件触发的 action 会传递到 reducer，reducer 接收这个参数 action，他通过 switch(action.type) 然后做不同操作，前面说了，这个 type 是指令的标识，reducer 根据这个标识来作出不同的操作。<br>这个操作是什么呢？<br>reducer 还接收另一个参数 state，这个是旧的 state。从 action 里面还可以获取到做这个操作需要的 参数值。<br>这个操作其实就是对原有的 state 和 从 action 中的到的值，来进行操作（结合，删除，…）然后返回一个 新的 state 到 store。</p>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>在看actions.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CLICK_TEXT =<span class="string">'CLICK_TEXT'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CLICK_BUTTON = <span class="string">'CLICK_BUTTON'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clickText</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        type:CLICK_TEXT,</div><div class="line">        text</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clickButton</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        type:CLICK_BUTTON</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>action 可以理解为一种指令，store 数据的唯一由来就是 action，action 是一个对象，它需要至少一个元素，type，type 是这个指令的唯一标识，其它元素是传送这个指令的 state 值</p>
<p>最后看容器组件是怎样把视图和行为结合在一起的</p>
<p>App.js</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t'</div><div class="line"><span class="keyword">import</span> &#123;createStore,bindActionCreators&#125;  from <span class="symbol">'redu</span>x'</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">Provider</span>,connect&#125; from <span class="symbol">'react</span>-redux'</div><div class="line"><span class="keyword">import</span> &#123;clickText,clickButton&#125; from '../actions/actions.js'</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">    &#125;</div><div class="line">    handleClick=()=&gt;&#123;</div><div class="line">        <span class="keyword">this</span>.props.actions.clickText()</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;h1 onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;/h1&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Change</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">    &#125;</div><div class="line">    handleClick=()=&gt;&#123;</div><div class="line">        <span class="keyword">this</span>.props.actions.clickButton()</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;点我看看&lt;/button&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        const &#123;actions,text&#125; = <span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;<span class="type">Hello</span> actions=&#123;actions&#125; text=&#123;text&#125;/&gt;</div><div class="line">                &lt;<span class="type">Change</span> actions=&#123;actions&#125;/&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function mapStateToProps(state)&#123;</div><div class="line">    <span class="keyword">return</span> &#123;text:state.text&#125;</div><div class="line">&#125;</div><div class="line">function mapDispatchToProps(dispatch)&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        actions:bindActionCreators(&#123;clickText:clickText,clickButton:clickButton&#125;,dispatch)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">App</span>= connect(mapStateToProps,mapDispatchToProps)(<span class="type">App</span>)</div><div class="line">export <span class="keyword">default</span> <span class="type">App</span></div></pre></td></tr></table></figure>
<h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>这个组件才是真正连接 Redux 和 React，他包在我们的容器组件的外一层，他接收上面 Provider 提供的 store 里面的 state 和 dispatch，传给一个构造函数，返回一个对象，以属性形式床给我们的容器组件。</p>
<p>如果你有耐心看到这里，你就很流弊啦，对比纯react的方式实现，你会发现，使用redux代码多了不是一点半点，真的有必要这样么？答案当然是：看你的项目需求~~~如果你的项目没有大量的数据交互，组件通信，你完全可以只用React，但是如果有的话，你会发现你要手动的管理state,对于后期维护很难，姑娘现在就遇到了这样的问题，代码初期考虑到学习成本，没有使用Redux,导致现在每个父组件一堆state要手动管理，重构起来简直不想多看一眼。</p>
<p><a href="http://qiutc.me/post/redux-%E5%A4%A7%E6%B3%95%E5%A5%BD-%E2%80%94%E2%80%94-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B-TodoList.html" target="_blank" rel="external">参考1</a><br><a href="http://www.alloyteam.com/2015/09/react-redux/" target="_blank" rel="external">参考2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React组件通信]]></title>
      <url>http://yoursite.com/2016/11/24/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h3 id="React实现组件直接通信"><a href="#React实现组件直接通信" class="headerlink" title="React实现组件直接通信"></a>React实现组件直接通信</h3><a id="more"></a>
<p>场景：一个显示文本的组件Hello，一个点击按钮组件Change，显示文本组件可以通过点击事件替换文本，点击按钮组件可以通过点击将显示文本组件的文本替换掉，两个组件直接是怎样通信的呢？</p>
<p>代码：不考虑Change组件，我们会这样实现Hello组件</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">        <span class="keyword">this</span>.state=&#123;</div><div class="line">          text:<span class="symbol">'hell</span>o'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    handleClick=()=&gt;&#123;</div><div class="line">        let text = <span class="keyword">this</span>.state.text;</div><div class="line">        let newtext= (text==<span class="symbol">'hell</span>o' )? '在coding的姑娘':<span class="symbol">'hell</span>o'</div><div class="line">        <span class="keyword">this</span>.setState(&#123;text:newtext&#125;)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;h1 onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;&#123;<span class="keyword">this</span>.state.text&#125;&lt;/h1&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是现在，我们要通过另外一个组件来更改text，这就需要一个父组件App来里text，Change组件和Hello组件直接的通信就要利用父组件的props</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Hello组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">    &#125;</div><div class="line">    handleClick=()=&gt;&#123;</div><div class="line">        <span class="keyword">this</span>.props.onClickText()</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;h1 onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;/h1&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Change组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Change</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">    &#125;</div><div class="line">    handleClick= ()=&gt;&#123;</div><div class="line">        <span class="keyword">this</span>.props.onClickButton()</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;点我&lt;/button&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//App组件</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">        <span class="keyword">this</span>.state=&#123;</div><div class="line">            text:<span class="symbol">'hell</span>o'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    handleClickText=()=&gt;&#123;</div><div class="line">        let text = <span class="keyword">this</span>.state.text;</div><div class="line">        let newtext= (text==<span class="symbol">'hell</span>o' )? '在coding的姑娘':<span class="symbol">'hell</span>o'</div><div class="line">        <span class="keyword">this</span>.setState(&#123;text:newtext&#125;)</div><div class="line">    &#125;</div><div class="line">    handleClickButton=()=&gt;&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;text:'姑娘你点击了按钮'&#125;)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;<span class="type">Hello</span> text=&#123;<span class="keyword">this</span>.state.text&#125; onClickText=&#123;<span class="keyword">this</span>.handleClickText&#125;/&gt;</div><div class="line">                &lt;<span class="type">Change</span> onClickButton=&#123;<span class="keyword">this</span>.handleClickButton&#125;/&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React踩过的坑]]></title>
      <url>http://yoursite.com/2016/11/21/React%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="setState延迟"><a href="#setState延迟" class="headerlink" title="setState延迟"></a>setState延迟</h3><a id="more"></a>
<ul>
<li>分页操作，点击下一页，第一次点击无效，第二次点击生效</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;firstRow:<span class="function"><span class="params">(page<span class="number">-1</span>)</span>*pageSize&#125;,<span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">this</span>.refresh()</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>利用setState的回调，等到状态更改成功之后再操作</p>
<h3 id="列表页删除一项后，列表页不能实时刷新"><a href="#列表页删除一项后，列表页不能实时刷新" class="headerlink" title="列表页删除一项后，列表页不能实时刷新"></a>列表页删除一项后，列表页不能实时刷新</h3><p>原因：删除操作后，后端可能还没处理好，就重新拉取数据，导致数据没有变化</p>
<p>通过设置延迟</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setTimeout</span><span class="params">(this.refresh,<span class="number">1000</span>)</span></span></div></pre></td></tr></table></figure>
<p>或者将列表缓存到数组中，直接对数组进行操作，删除后无需再次拉取数据</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次回来]]></title>
      <url>http://yoursite.com/2016/11/21/%E5%9B%9E%E5%BD%92%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>从搭建博客完毕到现在又很久没有使用博客了，时间过得好快，转眼毕业工作近半年了，总是养不成一个坚持写点东西的习惯，最近在看《当你的才华还撑不起你的梦想时》，书中很多励志文字，但是坚持下来却是最难最难的，就像我写博客永远总是三分钟热度，觉得自己没有东西要写,写不出东西来，其实这也是最大的缺点吧技术不过关。这一次就挑战一下自己，看看能坚持写每天写博客写多久！<br><a id="more"></a></p>
</blockquote>
<p>今天先分享一个自己的小目标：</p>
<p>之前搭建博客的时候，弄了一半就没有搭建了，关于评论这一块都没有加上，看上去总是不完美，今天把多说加上了，以后欢迎大家评论指导。不过总感觉界面看起来没有那么漂亮，求各路大神指导啊！！<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(<span class="string">'终于把代码高亮问题解决啦，今天晚上可以愉快的写代码啦~~'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular-popups]]></title>
      <url>http://yoursite.com/2016/09/13/Angular-popups/</url>
      <content type="html"><![CDATA[<p><a href="https://aui.github.io/angular-popups/#popup" target="_blank" rel="external">基于angularJS的浮层组件</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式]]></title>
      <url>http://yoursite.com/2016/09/08/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript设计模式（Design-pattern）"><a href="#JavaScript设计模式（Design-pattern）" class="headerlink" title="JavaScript设计模式（Design pattern）"></a>JavaScript设计模式（Design pattern）</h1><a id="more"></a>
<p>我们每天都在使用设计模式，但是不了解设计模式的人，可能根本不知道自己已经在使用设计模式了，了解设计模式，有利于提高自己的代码质量。那么什么是设计模式？设计模式可以为我们带来哪些好处呢？</p>
<blockquote>
<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p>
</blockquote>
<h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><blockquote>
<p>就像每种语言都有自己的规范，设计模式也遵循自己的原则</p>
</blockquote>
<ul>
<li><p>开闭原则（OCP：Open Closed Principe）</p>
<blockquote>
<p>Software entites(classes，modules，functions，etc)，should be  open for extension ,but closed for modification.</p>
<p>软件实体（类，模块，方法等等）应当对扩展开发，对修改关闭。</p>
</blockquote>
</li>
<li><p>单一职责（SRP:Single Responsibility Principle）</p>
<blockquote>
<p>A class should have only one reason to change</p>
</blockquote>
</li>
<li><p>里氏代换原则（LSP:Leskov Substitution Principle）</p>
</li>
<li><p>依赖倒转原则（DIP:Dependency Inversion Principle）</p>
</li>
<li><p>接口隔离(ISP:Interface Segregation Principle)</p>
</li>
<li><p>迪米特法则(最少知识原则)(PLK :Principle of Least Knowledge)</p>
<p>原则介绍<a href="https://segmentfault.com/a/1190000000691175" target="_blank" rel="external">请戳这里</a>;</p>
</li>
</ul>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型设计模式Creational"><a href="#创建型设计模式Creational" class="headerlink" title="创建型设计模式Creational"></a>创建型设计模式Creational</h3><blockquote>
<p>根据创建对象的概念进行分类</p>
</blockquote>
<ul>
<li><h4 id="工厂方法：Factory-Method"><a href="#工厂方法：Factory-Method" class="headerlink" title="工厂方法：Factory Method"></a>工厂方法：Factory Method</h4></li>
</ul>
<blockquote>
<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。简单点说就是茶水间的饮料机，要咖啡还是牛奶取决于你按哪个按钮。</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">子类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarFactory</span><span class="params">()</span></span>&#123;</div><div class="line">  alert(<span class="string">'car'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TrucksFactory</span><span class="params">()</span></span>&#123;</div><div class="line">  alert(<span class="string">'Trucks'</span>);</div><div class="line">&#125;</div><div class="line">工厂类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span><span class="params">(type)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(type == <span class="string">'car'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CarFactory();</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">'Trucks'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TrucksFactory();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">使用：</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Factory(<span class="string">'car'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<ol>
<li>根据不同的环境创建不同的实例对象</li>
<li>对象的构建比较复杂</li>
<li>处理大量有相同属性的小对象</li>
</ol>
<blockquote>
<p>应用原则</p>
</blockquote>
<ol>
<li>单一职责</li>
</ol>
<p>因为每次扩展都需要修改工厂类，这样违背了开闭原则。</p>
<ul>
<li><h4 id="抽象工厂：Abstract-Factory"><a href="#抽象工厂：Abstract-Factory" class="headerlink" title="抽象工厂：Abstract Factory"></a>抽象工厂：Abstract Factory</h4></li>
</ul>
<blockquote>
<p>抽象工厂是工厂模式的升级版，他用来创建一组相关或者相互依赖的对象。上节学习了工厂模式，类的创建依赖工厂类，程序需要扩展时，我们必须创建新的工厂类。工厂类是用来生产产品的，那我们也可以把“工厂类当成我们要生产的产品”，所以抽象工厂就是“工厂的工厂”，即生产工厂的工厂。抽象工厂模式就是对功能类单独创建工厂类,这样就不必修改之前的代码，又扩展了功能。</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span><span class="params">()</span></span>&#123;</div><div class="line">  alert(<span class="string">'car'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Truck</span><span class="params">()</span></span>&#123;</div><div class="line">  alert(<span class="string">'Truck'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//直接创建功能类工厂</span></div><div class="line"><span class="comment">//汽车</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarFactory</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">CarFactory.prototype.produce = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Car();</div><div class="line">&#125;</div><div class="line"><span class="comment">//货车</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TruckFactory</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">TruckFactory.prototype.produce = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Truck();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> TruckFactory();</div><div class="line"><span class="keyword">var</span> truck  = factory.produce();</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>在一个继承体系中存在多个等级结构：例如不同的厂家生产car,并且分属各个等级结构中的实现类之间存在着一定的关联或者约束</p>
<blockquote>
<p>应用原则</p>
</blockquote>
<ol>
<li>单一原则</li>
<li>开闭原则</li>
</ol>
<ul>
<li><h4 id="建造者：Builder"><a href="#建造者：Builder" class="headerlink" title="建造者：Builder"></a>建造者：Builder</h4></li>
</ul>
<blockquote>
<p>建造器使得我们仅仅只通过定义对象的类型和内容，就可以去构建复杂的对象，为我们屏蔽了明确创造或者展现对象的过程。</p>
</blockquote>
<p><code>四要素：</code></p>
<p>产品类、抽象建造者类、建造者类、指导类</p>
<p>上栗子：前面你创建了一个生产保时捷的工厂，生产一台保时捷911需要的主要部件都一样(引擎，轮子，方向盘…)和流程是不变的，变的是引擎，轮子，控制系统等等部件具体实现，这些部件的生产交由具体的builder去生产。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">产品类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _frame, _engine, _wheel;</div><div class="line">  <span class="keyword">this</span>.setFrame = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    _frame = val;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.setEngine = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    _engine = val;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.setWheel = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    _wheel = val;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.getFrame = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> _frame</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.getEngine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> _engine</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.getWheel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> _wheel</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.check = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_frame + <span class="string">'检查完毕'</span>);</div><div class="line">    <span class="built_in">console</span>.log(_engine + <span class="string">'检查完毕'</span>);</div><div class="line">    <span class="built_in">console</span>.log(_wheel + <span class="string">'检查完毕'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">抽象建造者类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Builder</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   	<span class="comment">//定义流程的接口</span></div><div class="line">   	buildFrame、buildEngine、buildWheel、buildCar</div><div class="line">&#125;</div><div class="line"></div><div class="line">具体建造者类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Builder911</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.__proto__ = <span class="keyword">new</span> Builder();</div><div class="line">  <span class="keyword">var</span> _car = <span class="keyword">new</span> Car();</div><div class="line">  <span class="keyword">this</span>.buildFrame = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造911骨架'</span>);</div><div class="line">    _car.setFrame(<span class="string">'911骨架'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildEngine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造911引擎'</span>);</div><div class="line">    _car.setEngine(<span class="string">'911引擎'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildWheel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造911轮子'</span>);</div><div class="line">    _car.setWheel(<span class="string">'911轮子'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildCar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'911汽车各部组装完毕'</span>);</div><div class="line">    <span class="keyword">return</span> _car;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BuilderCayma</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.__proto__ = <span class="keyword">new</span> Builder();</div><div class="line">  <span class="keyword">var</span> _car = <span class="keyword">new</span> Car();</div><div class="line">  <span class="keyword">this</span>.buildFrame = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造Cayma骨架'</span>);</div><div class="line">    _car.setFrame(<span class="string">'Cayma骨架'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildEngine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造Cayma引擎'</span>);</div><div class="line">    _car.setEngine(<span class="string">'Cayma引擎'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildWheel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'制造Cayma轮子'</span>);</div><div class="line">    _car.setWheel(<span class="string">'Cayma轮子'</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.buildCar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Cayma汽车各部组装完毕'</span>);</div><div class="line">    <span class="keyword">return</span> _car;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">指导类：</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Director</span>(<span class="params">Builder</span>) </span>&#123;</div><div class="line">  <span class="comment">//传入具体制造者</span></div><div class="line">  <span class="keyword">var</span> _builder = Builder;</div><div class="line">  <span class="keyword">this</span>.build = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    _builder.buildFrame();</div><div class="line">    _builder.buildEngine();</div><div class="line">    _builder.buildWheel();</div><div class="line">    <span class="keyword">return</span> _builder.buildCar();</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">使用：</div><div class="line"></div><div class="line"><span class="keyword">var</span> builder911 = <span class="keyword">new</span> Builder911();</div><div class="line"><span class="keyword">var</span> director911 = <span class="keyword">new</span> Director(builder911);</div><div class="line"><span class="keyword">var</span> car911 = director911.build();</div><div class="line">car911.check();</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>需要生成的对象具有复杂的内部结构；需要生成的对象内部属性本身相互依赖。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>1.建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体而言可以取得比较好的稳定性。<br>2.建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成。</p>
<ul>
<li><h4 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h4></li>
</ul>
<blockquote>
<p>“四人组”称原型模式是一种基于现有对象模板，通过克隆方式创建对象的模板（《JavaScript设计模式》p70），我们可以认为原型模式是基于原型继承的模式，是一种组合式继承，可以在其中创建对象</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">基类：</div><div class="line">var base = function()&#123;</div><div class="line">  this.name = <span class="string">'base'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">子类：</div><div class="line">var <span class="function"><span class="keyword">sub</span> = <span class="title">Object</span>.<span class="title">create</span></span>(base);</div><div class="line">console.log(<span class="function"><span class="keyword">sub</span>.<span class="title">name</span>)</span>;</div></pre></td></tr></table></figure>
<p><code>Object.create(prototype,descriptors)</code>:创建一个具有指定原型且可选择性地包含指定属性的对象,实现继承</p>
<ul>
<li><h4 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h4></li>
</ul>
<blockquote>
<p>单例就是保证一个类只有一个实例</p>
</blockquote>
<p>简单单例模式:使用对象字面量的方式创建对象</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleton = &#123;</div><div class="line">  name : <span class="string">''</span>,</div><div class="line">  age : <span class="string">''</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：全局的资源，公共的数据</p>
<p>惰性单例模式：通过闭包设置私有变量，延迟初始化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instantiated;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*这里定义单例代码*/</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            publicMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">            &#125;,</div><div class="line">            publicProperty: <span class="string">'test'</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        getInstance: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!instantiated) &#123;</div><div class="line">                instantiated = init();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instantiated;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>分支单体</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Slington = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">var</span> def = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> More = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> objA = &#123; <span class="comment">//火狐浏览器  内部的一些配置</span></div><div class="line">            attr1: <span class="string">'ff attr1'</span>,</div><div class="line">            <span class="comment">//属性1</span></div><div class="line">            <span class="comment">//方法1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> objB = &#123;  <span class="comment">//ie浏览器 内部的一些配置</span></div><div class="line">            attr2: <span class="string">'ie attr1'</span>,</div><div class="line">            <span class="comment">//属性1</span></div><div class="line">            <span class="comment">//方法1</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (def) ? <span class="keyword">new</span> More().objA : <span class="keyword">new</span> More().objB;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="结构型设计模式-Structural"><a href="#结构型设计模式-Structural" class="headerlink" title="结构型设计模式(Structural)"></a>结构型设计模式(Structural)</h3><blockquote>
<p>结构型模式关注于对象组成和通常识别的方式实现不同对象直接的关系。</p>
</blockquote>
<ul>
<li><h4 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a>适配器模式（Adapter）</h4><blockquote>
<p>适配器模式是将一个对象的方法或者属性转化为客户希望的另外一个对象的方法或属性，适配器模式使得原本由于接口不兼容而不能一起工作的对象可以一起工作(有种偷梁换柱的感觉奥)。速成包装器(wrapper)</p>
</blockquote>
<p>上栗子：猫：会走、会叫（miao）;狗：会走、会叫（wang）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//猫</span></div><div class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Cat.prototype.go=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Cat.prototype.miao = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'miao'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//狗</span></div><div class="line"><span class="keyword">var</span> Dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Dog.prototype.go=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Dog.prototype.wang = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'wang'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果我们想让狗也实现猫的叫声，就需要写一个新的狗的适配器DogAdapter</span></div><div class="line"><span class="keyword">var</span> DogAdapter = <span class="function"><span class="keyword">function</span>(<span class="params">dog</span>)</span>&#123;</div><div class="line">  Cat.apply(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>.dog = dog;</div><div class="line">&#125;</div><div class="line">DogAdapter.prototype = <span class="keyword">new</span> Cat();</div><div class="line">DogAdapter.prototype.miao = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.dog.wang();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</div><div class="line"><span class="keyword">var</span> dogAdapter = <span class="keyword">new</span> DogAdapter(dog);</div><div class="line"><span class="comment">//原始各自的行为</span></div><div class="line">cat.miao();<span class="comment">//miao</span></div><div class="line">dog.wang();<span class="comment">//wang</span></div><div class="line"><span class="comment">//狗调用猫的叫声，发自己的声音</span></div><div class="line">dogAdapter.miao();<span class="comment">//wang</span></div></pre></td></tr></table></figure>
</li>
<li><h4 id="桥接模式Bridge"><a href="#桥接模式Bridge" class="headerlink" title="桥接模式Bridge"></a>桥接模式Bridge</h4><blockquote>
<p>将抽象部分与她的实现部分分离，是他们可以独立的变化</p>
</blockquote>
<p>这样说可能有点抽象，下面我们用代码说话，上栗子:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常用的ajax请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendInfo</span><span class="params">(element)</span></span>&#123;</div><div class="line">  <span class="keyword">var</span> id = element.id;</div><div class="line">  ajax( <span class="string">"GET"</span>,<span class="string">"info.json?id="</span>+id, <span class="function"><span class="keyword">function</span><span class="params">( result )</span></span>&#123;</div><div class="line">         ...</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//很多时候我们使用sendInfo方法，每个方法中都有ajax请求，这时你会发现大量重复的代码(当你的代码中超过2处重复的代码时，你就要考虑重构你的代码了,单一职责原则)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendInfo</span><span class="params">(elelment)</span></span>&#123;</div><div class="line">  <span class="keyword">var</span> id = element.id;</div><div class="line">  <span class="keyword">callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(result)</span></span>&#123;&#125;</div><div class="line">  ajaxBrige(id,<span class="keyword">callback</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxBrige</span><span class="params">(id,callback)</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> id = element.id;</div><div class="line">    ajax( <span class="string">"GET"</span>,<span class="string">"info.json?id="</span>+id, <span class="function"><span class="keyword">function</span><span class="params">( result )</span></span>&#123;</div><div class="line">         <span class="keyword">callback</span>(reslut)</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点<ol>
<li>接口和实现隔离，实现单一责任</li>
<li>提高可扩充性</li>
<li>实现的细节对用户隐藏</li>
</ol>
</li>
</ul>
</li>
<li><h4 id="组合模式（Composite）"><a href="#组合模式（Composite）" class="headerlink" title="组合模式（Composite）"></a>组合模式（Composite）</h4><blockquote>
<p>将对象组合成树形结构以表示整体-部分的管理，组合模式中只有两种类型对象，组合对象，叶子对象</p>
</blockquote>
<p>上栗子：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组合对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ImagesStore</span>(<span class="params"> id </span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.children = [];</div><div class="line">    <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    <span class="keyword">this</span>.element.id = id;</div><div class="line">    <span class="keyword">this</span>.element.className = <span class="string">"imgs-store"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImagesStore.prototype = &#123;</div><div class="line">    constructor ： ImagesStore，</div><div class="line"></div><div class="line">    <span class="attribute">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> child </span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.children.push( child );</div><div class="line">        <span class="keyword">this</span>.element.appendChild( child.getElement() );</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">remove</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> child </span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span>( <span class="built_in">var</span> node, i=<span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++ )&#123;</div><div class="line">            <span class="keyword">if</span>( node === child )&#123;</div><div class="line">                <span class="keyword">this</span>.children.splice( i, <span class="number">1</span> );</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.element.removeChild( child.getElement() );</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">getChild</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.children[i];</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">show</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element.style.display = <span class="string">''</span>;</div><div class="line">        <span class="keyword">for</span>( <span class="built_in">var</span> node, i=<span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++ )&#123;</div><div class="line">            node.show();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">hide</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span>( <span class="built_in">var</span> node, i=<span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++ )&#123;</div><div class="line">            node.hide();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.element.style.display = <span class="string">'none'</span>;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">getElement</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.element;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//叶子对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ImageItem</span>(<span class="params"> src </span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">    <span class="keyword">this</span>.element.src = src;</div><div class="line">    <span class="keyword">this</span>.element.className = <span class="string">"img-item"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImageItem.prototype = &#123;</div><div class="line">    constructor ： ImagesStore，</div><div class="line"></div><div class="line">    <span class="attribute">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> child </span>)</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this is image object, no add function"</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">remove</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> child </span>)</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this is image object, no remove function"</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">getChild</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>)</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this is image object, no getChild function"</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">show</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element.style.display = <span class="string">''</span>;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">hide</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element.style.display = <span class="string">'none'</span>;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attribute">getElement</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.element;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//组合</span></div><div class="line"><span class="built_in">var</span> store = <span class="keyword">new</span> ImagesStore(<span class="string">"first"</span>);</div><div class="line">store.add( <span class="keyword">new</span> ImageItem(<span class="string">"/img/1.jpg"</span>) );</div><div class="line">store.add( <span class="keyword">new</span> ImageItem(<span class="string">"/img/2.jpg"</span>) );</div></pre></td></tr></table></figure>
<blockquote>
<p>使用场景</p>
</blockquote>
<ul>
<li>你想表示对象的部分-整体层次结构时；</li>
<li>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）</li>
</ul>
</li>
<li><h4 id="装饰器模式（Decorator）"><a href="#装饰器模式（Decorator）" class="headerlink" title="装饰器模式（Decorator）"></a>装饰器模式（Decorator）</h4><blockquote>
<p>在不改变原类和继承的情况下动态扩展对象功能，通过包装一个对象来实现一个新的具有原对象相同接口的新的对象。</p>
</blockquote>
<p>在没有使用模式之前，对于一个js小白来讲，创建一个父类，通过不同的子类来实现不同的功能，这也是面向对象的思想，思路是正确的，可是你有没有想过后期的维护呢？如果功能少还好，功能很多就要写很多个子类，同时如果需要扩展也要重新定义子类</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//父类</div><div class="line"><span class="keyword">var</span> <span class="type">Car</span> = function()&#123;&#125;</div><div class="line">//不同公共的子类子类</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithPowerLocks</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithPowerWindows</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithPowerLocksAndPowerWindows</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithAC</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithACAndPowerLocks</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithACAndPowerWindows</span> = function() <span class="meta">&#123;...&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="type">CarWithACAndPowerLocksAndPowerWindows</span> = function() <span class="meta">&#123;...&#125;</span>;</div></pre></td></tr></table></figure>
<p>下面使用装饰者模式来拯救你的不可维护的代码吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个基类Car</span></div><div class="line"><span class="keyword">var</span> Car = functionn()&#123;&#125;</div><div class="line">Car.prortype=&#123;</div><div class="line">  start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'伴随着引擎的轰鸣声，车子发动了！'</span>);</div><div class="line">    &#125;,</div><div class="line">    drive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'走起!'</span>);</div><div class="line">    &#125;,</div><div class="line">    getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">11000.00</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建装饰者抽象类</span></div><div class="line"><span class="comment">// 你需要传递一个Car（或者是CarDecorator）才能为它添加功能。</span></div><div class="line"><span class="keyword">var</span> CarDecorator = <span class="function"><span class="keyword">function</span>(<span class="params">car</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.car = car;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CarDecorator 实现相同的接口</span></div><div class="line">CarDecorator.prototype = &#123;</div><div class="line">    start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.car.start();</div><div class="line">    &#125;,</div><div class="line">    drive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.car.drive();</div><div class="line">    &#125;,</div><div class="line">    getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体的装饰者类</span></div><div class="line"><span class="keyword">var</span> PowerLocksDecorator = <span class="function"><span class="keyword">function</span>(<span class="params">car</span>) </span>&#123;</div><div class="line">    <span class="comment">// 这是JavaScript里调用父类构造函数的方式</span></div><div class="line">    CarDecorator.call(<span class="keyword">this</span>, car);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'装配：添加动力锁'</span>);</div><div class="line">&#125;</div><div class="line">PowerLocksDecorator.prototype = <span class="keyword">new</span> CarDecorator();</div><div class="line">PowerLocksDecorator.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 你可以这么写</span></div><div class="line">    <span class="keyword">this</span>.car.drive();</div><div class="line">    <span class="comment">// 或者你可以调用父类的drive方法：</span></div><div class="line">    <span class="comment">// CarDecorator.prototype.drive.call(this);</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'车门自动上锁'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> PowerWindowsDecorator = <span class="function"><span class="keyword">function</span>(<span class="params">car</span>) </span>&#123;</div><div class="line">    CarDecorator.call(<span class="keyword">this</span>, car);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'装配：添加动力表盘'</span>);</div><div class="line">&#125;</div><div class="line">PowerWindowsDecorator.prototype = <span class="keyword">new</span> CarDecorator();</div><div class="line"></div><div class="line"><span class="keyword">var</span> ACDecorator = <span class="function"><span class="keyword">function</span>(<span class="params">car</span>) </span>&#123;</div><div class="line">    CarDecorator.call(<span class="keyword">this</span>, car);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'装配：添加空调'</span>);</div><div class="line">&#125;</div><div class="line">ACDecorator.prototype = <span class="keyword">new</span> CarDecorator();</div><div class="line">ACDecorator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.car.start();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'冷风吹起来'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们每次新增功能，都可以确保基类和装饰类不改变，只需要通过具体的装饰类来扩展功能就好。感觉和组合模式很像，组合模式侧重部分-整体，将部分注入到整体中，而装饰者模式是通过具体的装饰者类实现角色的基本功能并添加额外功能</p>
<p>看完栗子，来总结一下：</p>
<blockquote>
<p>装饰者模式的几大要素</p>
</blockquote>
<ol>
<li>角色（Component）:定义了接口，规范准备接受的对象（Car）</li>
<li>装饰角色（Decorator）：持有角色（Component）的实例，定义与角色一致的接口（CarDecorator）</li>
<li>具体装饰着（PowerLocksDecorator）:负责给角色添加附加功能</li>
</ol>
<blockquote>
<p>优点</p>
</blockquote>
<ol>
<li>装饰类和被装饰类可以独立发展，不会相互耦合</li>
<li>装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。就增加功能来说，装饰器模式相比生成子类更为灵活。</li>
</ol>
<blockquote>
<p>使用场景</p>
</blockquote>
<ol>
<li>扩展一个类的功能。</li>
<li>动态增加功能，动态撤销。</li>
</ol>
<blockquote>
<p>使用了 开闭原则</p>
</blockquote>
<p><a href="http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/" target="_blank" rel="external">这里讲解很精彩</a></p>
</li>
<li><h4 id="外观模式（Facede）"><a href="#外观模式（Facede）" class="headerlink" title="外观模式（Facede）"></a>外观模式（Facede）</h4><blockquote>
<p>门面模式本质是实现一个简单的统一接口来处理对各个子系统接口的处理和调用</p>
</blockquote>
<p>这里我们来回忆一下之前说过的桥接模式，两者感觉差不多，实际侧重点并不相同。桥接模式侧重于各个类相互独立，而外观模式侧重于接口和内部实现的分离，我们只需要知道怎样调用接口无需知道内部的实现过程。</p>
<p>上栗子：模拟电脑启动，假设电脑启动顺序：启动CPU，启动内存，启动硬盘，加载数据等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 外观模式     </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CPU</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.startup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"启动CPU"</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Memory</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.startup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"启动Memory"</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Disk</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.startup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"启动Disk"</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Computer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _cpu, _memory, _disk;</div><div class="line">  _cpu = <span class="keyword">new</span> CPU();</div><div class="line">  _memory = <span class="keyword">new</span> Memory();</div><div class="line">  _disk = <span class="keyword">new</span> Disk();</div><div class="line">  <span class="keyword">this</span>.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    _cpu.startup();</div><div class="line">    _memory.startup();</div><div class="line">    _disk.startup();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">computer = <span class="keyword">new</span> Computer();</div><div class="line">computer.start();</div></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<p>1.减少系统相互依赖。<br>2.提高灵活性。<br>2.提高了安全性。</p>
<blockquote>
<p>使用场景</p>
</blockquote>
<p>1.为复杂的模块或子系统提供外界访问的模块。<br>2.客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。</p>
</li>
<li><h4 id="享元模式（Flyweight）"><a href="#享元模式（Flyweight）" class="headerlink" title="享元模式（Flyweight）"></a>享元模式（Flyweight）</h4><p>​</p>
</li>
<li><h4 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h4></li>
</ul>
<h3 id="行为设计模式（Behavioral）"><a href="#行为设计模式（Behavioral）" class="headerlink" title="行为设计模式（Behavioral）"></a>行为设计模式（Behavioral）</h3><ul>
<li><h4 id="解释器（Interpreter）"><a href="#解释器（Interpreter）" class="headerlink" title="解释器（Interpreter）"></a>解释器（Interpreter）</h4></li>
<li><h4 id="模板方法（Template-Method）"><a href="#模板方法（Template-Method）" class="headerlink" title="模板方法（Template Method）"></a>模板方法（Template Method）</h4></li>
<li><h4 id="职责链（Responsibility）"><a href="#职责链（Responsibility）" class="headerlink" title="职责链（Responsibility）"></a>职责链（Responsibility）</h4></li>
<li><h4 id="命令（Command）"><a href="#命令（Command）" class="headerlink" title="命令（Command）"></a>命令（Command）</h4></li>
<li><h4 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h4></li>
<li><h4 id="中介者（Mediator）"><a href="#中介者（Mediator）" class="headerlink" title="中介者（Mediator）"></a>中介者（Mediator）</h4></li>
<li><h4 id="观察者（Observe）"><a href="#观察者（Observe）" class="headerlink" title="观察者（Observe）"></a>观察者（Observe）</h4></li>
<li><h4 id="状态（State）"><a href="#状态（State）" class="headerlink" title="状态（State）"></a>状态（State）</h4></li>
<li><h4 id="策略（Strategy）"><a href="#策略（Strategy）" class="headerlink" title="策略（Strategy）"></a>策略（Strategy）</h4></li>
<li><h4 id="访问者（Visitor）"><a href="#访问者（Visitor）" class="headerlink" title="访问者（Visitor）"></a>访问者（Visitor）</h4></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[bookmarks使用]]></title>
      <url>http://yoursite.com/2016/09/01/bookmarks%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>bookmarks可以很便利的存储、管理我们日常使用的网站，一般情况下，我们仅仅是把自己的网站存在自己的bookmarks下面，以便自己日后查看。在团队中，多多向别人学习，看看别人的代码，瞅瞅别人经常浏览的网站，通过这种方式找到学习的方向，提升自己，特别是对菜鸟，会提供方向性的指导，多浏览一下质量高的网站，对自己的提高帮助很大的。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>安装npm install netscape-bookmarks</p>
<p><code>npm install netscape-bookmarks</code></p>
</li>
<li><p>使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> netscape = <span class="built_in">require</span>(<span class="string">'netscape-bookmarks'</span>);</div><div class="line"><span class="keyword">var</span> bookmarks = &#123;</div><div class="line">  <span class="string">'Dave Eddy'</span>: <span class="string">'http://www.daveeddy.com'</span>,</div><div class="line">  <span class="string">'Perfume Global'</span>: <span class="string">'http://www.perfume-global.com'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> html = netscape(bookmarks));</div><div class="line"><span class="built_in">console</span>.log(html);</div></pre></td></tr></table></figure>
</li>
<li><p>copy html格式文件，html标签说明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE NETSCAPE-Bookmark-file-1&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Content-Type"</span> <span class="attr">CONTENT</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TITLE</span>&gt;</span>Bookmarks<span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">H1</span>&gt;</span>Bookmarks Menu<span class="tag">&lt;/<span class="name">H1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>   // 书签列表</div><div class="line">    <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"http://www.daveeddy.com"</span>&gt;</span>Dave Eddy's Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 书签项</div><div class="line">    <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"http://www.perfume-global.com/"</span>&gt;</span>Perfume Global<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">H3</span>&gt;</span>Unfiled<span class="tag">&lt;/<span class="name">H3</span>&gt;</span> // 书签文件夹</div><div class="line">    <span class="tag">&lt;<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"http://twitter.com"</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 书签项</div><div class="line">    <span class="tag">&lt;/<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">H3</span>&gt;</span>Second Folder<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">H3</span>&gt;</span>Nested Folders!<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"http://www.youtube.com"</span>&gt;</span>YouTube<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"https://github.com"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"http://www.tekzoned.com"</span> <span class="attr">ADD_DATE</span>=<span class="string">"1357547237"</span> <span class="attr">LAST_VISIT</span>=<span class="string">"1357547238"</span> <span class="attr">LAST_MODIFIED</span>=<span class="string">"1357547239"</span>&gt;</span>TekZoned<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">DL</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>浏览器-书签管理器-从html文件导入书签</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript模板引擎]]></title>
      <url>http://yoursite.com/2016/08/31/javascriptTemplate/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>javascript模板引擎作为数据与界面分离工作中的重要角色，下面我们从模板引擎的实现原理以及目前流行的模板引擎，模板引擎的优势来介绍一下</p>
</blockquote>
<a id="more"></a>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>虽然每个引擎从模板语法、语法解析、变量赋值、字符串拼接的实现方式各有所不同，但关键的渲染原理仍然是动态执行 javascript 字符串。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><blockquote>
<p>js模板的本质是 <code>变静为动</code></p>
</blockquote>
<ul>
<li>视图和代码逻辑分离、低耦合</li>
<li>可拓展、可维护、开发效率高</li>
<li>代码可读性</li>
</ul>
<h3 id="目前流行的-JavaScript模板引擎"><a href="#目前流行的-JavaScript模板引擎" class="headerlink" title="目前流行的 JavaScript模板引擎"></a>目前流行的 JavaScript模板引擎</h3><ul>
<li><h4 id="artTemplate-腾讯"><a href="#artTemplate-腾讯" class="headerlink" title="artTemplate(腾讯)"></a>artTemplate(腾讯)</h4></li>
<li><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h4></li>
<li><h4 id="baiduTemplate-百度"><a href="#baiduTemplate-百度" class="headerlink" title="baiduTemplate(百度)"></a>baiduTemplate(百度)</h4></li>
<li><h4 id="juicer-淘宝"><a href="#juicer-淘宝" class="headerlink" title="juicer(淘宝)"></a>juicer(淘宝)</h4></li>
<li><h4 id="Underscore-Templates"><a href="#Underscore-Templates" class="headerlink" title="Underscore Templates"></a>Underscore Templates</h4></li>
<li><h4 id="Embedded-JS-Templates"><a href="#Embedded-JS-Templates" class="headerlink" title="Embedded JS Templates"></a>Embedded JS Templates</h4><p>等等，可以参考这里<a href="http://www.csdn.net/article/2013-09-16/2816951-top-five-javascript-templating-engines" target="_blank" rel="external">五款流行的JavaScript模板引擎</a>;<a href="http://blog.csdn.net/wuchengzhi82/article/details/8938122" target="_blank" rel="external">javascript各种模板引擎</a>;</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li>
</ul>
<blockquote>
<p>以 （EJS）Embedded JS Templates为例</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用hexo+GitHub搭建自己的博客]]></title>
      <url>http://yoursite.com/2016/08/31/%E4%BD%BF%E7%94%A8hexo-GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>作为一名前端程序媛，没有自己的博客，听起来是不是很low！<br><a id="more"></a></p>
<p>对，你没有听错，我确实没有亲自搭建过自己的博客，就在2016年8月30日，偶尔阅读前端工程师必备技能的时候，发现了搭建自己博客这个东西，于是决定搭建一个博客来存储自己的知识总结，以便形成自己的知识体系。这之前使用github<a href="https://github.com/lylhub" target="_blank" rel="external">我的github地址</a>管理自己的代码（其实写的比较少）,而且很多知识性的总结写在里面不是很方便阅读。博客可以很方便的把知识总结存储起来。以前用过CSDN,用于存储知识还是可以，但是本地化和主题等就没有了，毕竟是用人家的网站，要想个性化还是要自己亲自去搭建一个高大上的网站吧。你正在浏览这个博客网站，耗费了本姑娘很长时间才搭建好的！！</p>
<p>这里有一篇很详细的教程：<a href="http://www.jianshu.com/p/985d07d88ef4" target="_blank" rel="external">使用 GitHub Pages + Hexo 基础教程</a>;<br>因为还没有写过正式的博客，对于hexo的使用还不熟悉，后面将更新我的的使用心得。</p>
]]></content>
    </entry>
    
  
  
</search>
